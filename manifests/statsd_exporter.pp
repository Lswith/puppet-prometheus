# Class: prometheus::statsd_exporter
#
# This module manages prometheus node statsd_exporter
#
# Parameters:
#
#  [*manage_user*]
#  Whether to create user for prometheus or rely on external code for that
#
#  [*user*]
#  User running statsd_exporter
#
#  [*manage_group*]
#  Whether to create user for statsd_exporter or rely on external code for that
#
#  [*purge_config_dir*]
#  Purge config files no longer generated by Puppet
#
#  [*group*]
#  Group under which statsd_exporter is running
#
#  [*bin_dir*]
#  Directory where binaries are located
#
#  [*arch*]
#  Architecture (amd64 or i386)
#
#  [*version*]
#  Prometheus node statsd_exporter release
#
#  [*install_method*]
#  Installation method: url or package (only url is supported currently)
#
#  [*os*]
#  Operating system (linux is the only one supported)
#
#  [*download_url*]
#  Complete URL corresponding to the Prometheus node statsd_exporter release, default to undef
#
#  [*download_url_base*]
#  Base URL for prometheus node statsd_exporter
#
#  [*download_extension*]
#  Extension of Prometheus node statsd_exporter binaries archive
#
#  [*package_name*]
#  Prometheus node statsd_exporter package name - not available yet
#
#  [*package_ensure*]
#  If package, then use this for package ensure default 'latest'
#
#  [*collectors*]
#  The set of node statsd_exporter collectors
#
#  [*extra_options*]
#  Extra options added to prometheus startup command
#
#  [*service_enable*]
#  Whether to enable or not prometheus node statsd_exporter service from puppet (default true)
#
#  [*service_ensure*]
#  State ensured from prometheus node statsd_exporter service (default 'running')
#
#  [*manage_service*]
#  Should puppet manage the prometheus node statsd_exporter service? (default true)
#
#  [*restart_on_change*]
#  Should puppet restart prometheus node statsd_exporter on configuration change? (default true)
#
#  [*init_style*]
#  Service startup scripts style (e.g. rc, upstart or systemd)
#
# Actions:
#
# Requires: see Modulefile
#
# Sample Usage:
#
class prometheus::statsd_exporter (
  $manage_user          = true,
  $user                 = $::prometheus::params::user,
  $manage_group         = true,
  $purge_config_dir     = true,
  $mapping_config_path  = $::prometheus::params::statsd_exporter_mapping_config_path,
  $mapping_source       = $::prometheus::params::statsd_exporter_mapping_source,
  $group                = $::prometheus::params::group,
  $bin_dir              = $::prometheus::params::bin_dir,
  $arch                 = $::prometheus::params::arch,
  $version              = $::prometheus::params::statsd_exporter_version,
  $install_method       = $::prometheus::params::install_method,
  $os                   = $::prometheus::params::os,
  $download_url         = undef,
  $extra_groups         = $::prometheus::params::statsd_exporter_extra_groups,
  $download_url_base    = $::prometheus::params::statsd_exporter_download_url_base,
  $download_extension   = $::prometheus::params::statsd_exporter_download_extension,
  $package_name         = $::prometheus::params::statsd_exporter_package_name,
  $package_ensure       = $::prometheus::params::statsd_exporter_package_ensure,
  $extra_options        = '',
  $config_mode          = $::prometheus::params::config_mode,
  $service_enable       = true,
  $service_ensure       = 'running',
  $manage_service       = true,
  $restart_on_change    = true,
  $init_style           = $::prometheus::params::init_style,
) inherits prometheus::params {
  $real_download_url    = pick($download_url,"${download_url_base}/download/${version}/${package_name}-${version}.${os}-${arch}.${download_extension}")
  validate_bool($purge_config_dir)
  validate_bool($manage_user)
  validate_bool($manage_service)
  validate_bool($restart_on_change)
  $notify_service = $restart_on_change ? {
    true    => Class['::prometheus::statsd_exporter::run_service'],
    default => undef,
  }

  anchor {'statsd_exporter_first': }
  ->
  class { '::prometheus::statsd_exporter::install': } ->
  class { '::prometheus::statsd_exporter::config':
    purge  => $purge_config_dir,
    notify => $notify_service,
  } ->
  class { '::prometheus::statsd_exporter::run_service': } ->
  anchor {'statsd_exporter_last': }
}
