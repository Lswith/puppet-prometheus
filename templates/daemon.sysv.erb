#!/bin/bash
#
#       /etc/rc.d/init.d/<%= @daemon_name %>
#
#       Daemonize the prometheus <%= @daemon_name %>
#
# chkconfig:   2345 95 20
# description: Prometheus Exporter <%= @daemon_name %>
# processname: <%= @daemon_name %>
# pidfile: /var/run/<%= @daemon_name %>/pidfile

# Source function library.
. /etc/init.d/functions

DAEMON=<%= @bin_dir %>/<%= @daemon_name %>
PID_FILE=/var/run/<%= @daemon_name %>/<%= @daemon_name %>.pid
LOG_FILE=/var/log/<%= @daemon_name %>

[ -e /etc/sysconfig/<%= @daemon_name %> ] && . /etc/sysconfig/<%= @daemon_name %>

export GOMAXPROCS=${GOMAXPROCS:-2}

#
# Create the /var/run/<%= @daemon_name %> directory, which can live on a tmpfs
# filesystem and be destroyed between reboots.
#
mkrundir() {
        [ ! -d /var/run/<%= @daemon_name %> ] && mkdir -p /var/run/<%= @daemon_name %>
        chown <%= @user %> /var/run/<%= @daemon_name %>
}

#
# Create a PID file if it doesn't already exist, for clean upgrades
# from previous init-script controlled daemons.
#
KILLPROC_OPT="-p ${PID_FILE}"
mkpidfile() {
        # Create PID file if it didn't exist
        mkrundir
        [ ! -f $PID_FILE ] && pidofproc $DAEMON > $PID_FILE
        chown <%= @user %> /var/run/<%= @daemon_name %>
        if [ $? -ne 0 ] ; then
            rm $PID_FILE
            KILLPROC_OPT=""
        fi
}

start() {
        echo -n "Starting prometheus <%= @daemon_name %>: "
        mkrundir
        [ -f $PID_FILE ] && rm $PID_FILE
        daemon --user=<%= @user %> \
            --pidfile="$PID_FILE" \
            "$DAEMON" <%= @options %> >> "$LOG_FILE" &
        retcode=$?
        mkpidfile
        touch /var/lock/subsys/<%= @daemon_name %>
        return $retcode
}

stop() {
        DELAY=5 # seconds maximum to wait for a leave

        echo -n "Shutting down prometheus <%= @daemon_name %>: "
        mkpidfile

        <%= @daemon_name %>_pid=$(cat $PID_FILE)
        killproc $KILLPROC_OPT $DAEMON -INT
        retcode=$?

        # We'll wait if necessary to make sure the leave works, and return
        # early if we can.  If not, escalate to harsher signals.
        try=0
        while [ $try -lt $DELAY ]; do
        if ! checkpid $<%= @daemon_name %>_pid ; then
          rm -f /var/lock/subsys/<%= @daemon_name %>
          return $retcode
        fi
        sleep 1
          let try+=1
        done

        # If acting as a server, use a SIGTERM to avoid a leave.
        # This behavior is also configurable.  Avoid doing a "leave" because
        # having servers missing is a bad thing that we want to notice.
        #
        # A SIGTERM will mark the node as "failed" until it rejoins.
        # killproc with no arguments uses TERM, then escalates to KILL.
        killproc $KILLPROC_OPT $DAEMON
        retcode=$?

        rm -f /var/lock/subsys/<%= @daemon_name %> $PID_FILE
        return $retcode
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        status -p ${PID_FILE} $DAEMON
        ;;
    restart)
        stop
        start
        ;;
    reload)
        mkpidfile
        killproc $KILLPROC_OPT $DAEMON -HUP
        ;;
    condrestart)
        [ -f /var/lock/subsys/<%= @daemon_name %> ] && restart || :
        ;;
    *)
        echo "Usage: <%= @daemon_name %> {start|stop|status|reload|restart}"
        exit 1
        ;;
esac
retcode=$?
# Don't let the [OK] get stomped on.
echo
exit $retcode
